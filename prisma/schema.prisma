generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Brand {
  id              String           @id @default(cuid())
  companyName     String
  contactName     String
  email           String           @unique
  password        String
  phoneCountry    String?
  phoneNumber     String?
  addressStreet   String?
  addressCity     String?
  addressState    String?
  addressZip      String?
  addressCountry  String?
  socialInstagram String?
  socialTwitter   String?
  socialLinkedIn  String?
  socialWebsite   String?
  paymentMethod   String?
  cardNumber      String?
  cardType        String?
  bankName        String?
  bankAccountType String?
  bankRouting     String?
  bankAccount     String?
  logo            String?
  isVerified      Boolean          @default(false)
  termsAccepted   Boolean          @default(false)
  createdAt       DateTime         @default(now())
  updatedAt       DateTime         @updatedAt
  awardDrafts     AwardDraft[]
  briefs          Brief[]
  publishedAwards PublishedAward[]
}

model Creator {
  id              String          @id @default(cuid())
  userName        String          @unique
  email           String          @unique
  password        String
  fullName        String
  phoneCountry    String?
  phoneNumber     String?
  addressStreet   String?
  addressCity     String?
  addressState    String?
  addressZip      String?
  addressCountry  String?
  socialInstagram String?
  socialTwitter   String?
  socialLinkedIn  String?
  socialTikTok    String?
  socialYouTube   String?
  portfolio       String?
  paymentMethod   String?
  cardNumber      String?
  cardType        String?
  bankName        String?
  bankAccountType String?
  bankRouting     String?
  bankAccount     String?
  paypalEmail     String?
  isVerified      Boolean         @default(false)
  termsAccepted   Boolean         @default(false)
  createdAt       DateTime        @default(now())
  updatedAt       DateTime        @updatedAt
  portfolioItems  PortfolioItem[]
  submissions     Submission[]
}

model Brief {
  id               String           @id @default(cuid())
  title            String
  description      String
  requirements     String
  reward           Float
  rewardType       String?          // CASH, CREDIT, PRIZES, or null if not set
  deadline         DateTime
  status           String           @default("draft")
  isPrivate        Boolean          @default(false)
  additionalFields String?
  brandId          String
  createdAt        DateTime         @default(now())
  updatedAt        DateTime         @updatedAt
  closedAt         DateTime?
  awardDrafts      AwardDraft[]
  brand            Brand            @relation(fields: [brandId], references: [id])
  publishedAwards  PublishedAward[]
  submissions      Submission[]
}

model PortfolioItem {
  id          String   @id @default(cuid())
  title       String
  description String
  category    String
  imageUrl    String?
  files       String?
  creatorId   String
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  creator     Creator  @relation(fields: [creatorId], references: [id])
}

model Submission {
  id          String    @id @default(cuid())
  briefId     String
  creatorId   String
  content     String
  files       String?
  amount      Float
  status      String    @default("pending")
  submittedAt DateTime  @default(now())
  reviewedAt  DateTime?
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  creator     Creator   @relation(fields: [creatorId], references: [id])
  brief       Brief     @relation(fields: [briefId], references: [id])
}

model AwardDraft {
  id          String   @id @default(cuid())
  briefId     String
  brandId     String
  rewardTiers String
  savedAt     DateTime @default(now())
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  brand       Brand    @relation(fields: [brandId], references: [id])
  brief       Brief    @relation(fields: [briefId], references: [id])
}

model PublishedAward {
  id          String   @id @default(cuid())
  briefId     String
  brandId     String
  rewardTiers String
  publishedAt DateTime @default(now())
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  brand       Brand    @relation(fields: [brandId], references: [id])
  brief       Brief    @relation(fields: [briefId], references: [id])
}
