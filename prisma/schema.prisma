generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Brand {
  id              String           @id @default(cuid())
  companyName     String
  contactName     String
  email           String           @unique
  password        String
  phoneCountry    String?
  phoneNumber     String?
  addressStreet   String?
  addressCity     String?
  addressState    String?
  addressZip      String?
  addressCountry  String?
  socialInstagram String?
  socialTwitter   String?
  socialLinkedIn  String?
  socialWebsite   String?
  paymentMethod   String?
  cardNumber      String?
  cardType        String?
  bankName        String?
  bankAccountType String?
  bankRouting     String?
  bankAccount     String?
  logo            String?
  isVerified      Boolean          @default(false)
  termsAccepted   Boolean          @default(false)
  createdAt       DateTime         @default(now())
  updatedAt       DateTime         @updatedAt
  awardDrafts     AwardDraft[]
  briefs          Brief[]
  publishedAwards PublishedAward[]
  wallet          BrandWallet?
}

model Creator {
  id              String          @id @default(cuid())
  userName        String          @unique
  email           String          @unique
  password        String
  fullName        String
  phoneCountry    String?
  phoneNumber     String?
  addressStreet   String?
  addressCity     String?
  addressState    String?
  addressZip      String?
  addressCountry  String?
  socialInstagram String?
  socialTwitter   String?
  socialLinkedIn  String?
  socialTikTok    String?
  socialYouTube   String?
  paymentMethod   String?
  cardNumber      String?
  cardType        String?
  bankName        String?
  bankAccountType String?
  bankRouting     String?
  bankAccount     String?
  paypalEmail     String?
  isVerified      Boolean         @default(false)
  termsAccepted   Boolean         @default(false)
  createdAt       DateTime        @default(now())
  updatedAt       DateTime        @updatedAt
  submissions     Submission[]
  winners         Winner[]
  wallet          CreatorWallet?
}

model Brief {
  id               String           @id @default(cuid())
  title            String
  description      String
  requirements     String
  reward           Float
  amountOfWinners  Int              @default(1)
  location         String?          // Location for the brief (optional)
  deadline         DateTime
  status           String           @default("draft")
  isPrivate        Boolean          @default(false)
  additionalFields String?
  brandId          String
  winnersSelected  Boolean          @default(false)
  totalRewardsPaid Float            @default(0)  // Track total rewards paid out
  createdAt        DateTime         @default(now())
  updatedAt        DateTime         @updatedAt
  closedAt         DateTime?
  awardDrafts      AwardDraft[]
  brand            Brand            @relation(fields: [brandId], references: [id])
  publishedAwards  PublishedAward[]
  submissions      Submission[]
  winners          Winner[]
  winnerRewards    WinnerReward[]
}



model Submission {
  id          String    @id @default(cuid())
  briefId     String
  creatorId   String
  content     String
  files       String?
  amount      Float
  status      String    @default("pending")
  submittedAt DateTime  @default(now())
  reviewedAt  DateTime?
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  brief       Brief     @relation(fields: [briefId], references: [id])
  creator     Creator   @relation(fields: [creatorId], references: [id])
  winner      Winner?
}

model AwardDraft {
  id          String   @id @default(cuid())
  briefId     String
  brandId     String
  rewardTiers String
  savedAt     DateTime @default(now())
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  brand       Brand    @relation(fields: [brandId], references: [id])
  brief       Brief    @relation(fields: [briefId], references: [id])
}

model PublishedAward {
  id          String   @id @default(cuid())
  briefId     String
  brandId     String
  rewardTiers String
  publishedAt DateTime @default(now())
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  brand       Brand    @relation(fields: [brandId], references: [id])
  brief       Brief    @relation(fields: [briefId], references: [id])
}

model Admin {
  id        String   @id @default(cuid())
  email     String   @unique
  password  String
  fullName  String
  role      String   @default("admin") // admin, super_admin, etc.
  isActive  Boolean  @default(true)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Winner {
  id           String     @id @default(cuid())
  briefId      String
  submissionId String     @unique
  creatorId    String
  position     Int        // 1st, 2nd, 3rd place, etc.
  selectedAt   DateTime   @default(now())
  createdAt    DateTime   @default(now())
  updatedAt    DateTime   @updatedAt
  brief        Brief      @relation(fields: [briefId], references: [id])
  submission   Submission @relation(fields: [submissionId], references: [id])
  creator      Creator    @relation(fields: [creatorId], references: [id])
  rewardId     String?    @unique
  reward       WinnerReward? @relation(fields: [rewardId], references: [id])
  payment      Payment?
}

model WinnerReward {
  id              String   @id @default(cuid())
  briefId         String
  position        Int      // 1st, 2nd, 3rd place, etc.
  cashAmount      Float    @default(0)
  creditAmount    Float    @default(0)
  prizeDescription String?
  isPaid          Boolean  @default(false)
  paidAt          DateTime?
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt
  brief           Brief    @relation(fields: [briefId], references: [id])
  winner          Winner?
}

model Notification {
  id        String   @id @default(cuid())
  userId    String   // Can be either brand or creator ID
  userType  String   // "brand" or "creator"
  title     String
  message   String
  type      String   // "winner", "submission", "brief", etc.
  isRead    Boolean  @default(false)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Payment {
  id              String   @id @default(cuid())
  winnerId        String   @unique
  amount          Float
  currency        String   @default("USD")
  paymentMethod   String   // "stripe", "credits", "prizes"
  rewardType      String   // "cash", "credits", "prizes"
  status          String   @default("pending") // "pending", "processing", "completed", "failed"
  stripePaymentIntentId String?  // Stripe payment intent ID
  stripeTransferId String?  // Stripe transfer ID for payouts
  paidAt          DateTime?
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt
  winner          Winner   @relation(fields: [winnerId], references: [id])
}

model CreatorWallet {
  id              String   @id @default(cuid())
  creatorId       String   @unique
  balance         Float    @default(0)
  totalEarned     Float    @default(0)
  totalWithdrawn  Float    @default(0)
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt
  creator         Creator  @relation(fields: [creatorId], references: [id])
  transactions    WalletTransaction[]
}

model WalletTransaction {
  id              String   @id @default(cuid())
  walletId        String
  type            String   // "credit", "debit", "withdrawal"
  amount          Float
  description     String
  referenceId     String?  // Payment ID or other reference
  balanceBefore   Float
  balanceAfter    Float
  createdAt       DateTime @default(now())
  wallet          CreatorWallet @relation(fields: [walletId], references: [id])
}

model BrandWallet {
  id              String   @id @default(cuid())
  brandId         String   @unique
  balance         Float    @default(0)
  totalSpent      Float    @default(0)
  totalDeposited  Float    @default(0)
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt
  brand           Brand    @relation(fields: [brandId], references: [id])
  transactions    BrandWalletTransaction[]
}

model BrandWalletTransaction {
  id              String   @id @default(cuid())
  walletId        String
  type            String   // "credit", "debit", "deposit"
  amount          Float
  description     String
  referenceId     String?  // Brief ID or other reference
  balanceBefore   Float
  balanceAfter    Float
  createdAt       DateTime @default(now())
  wallet          BrandWallet @relation(fields: [walletId], references: [id])
}
